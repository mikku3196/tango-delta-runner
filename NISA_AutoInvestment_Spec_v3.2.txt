# NISA口座最適活用・全自動資産運用プログラム 要件定義書 (最終確定版 v3.2)
**Version:** 3.2 (Final Definitive Version)  
**Finalized Date:** 2025-10-17  
**System Owner:** User  
**Lead Architect:** Gemini  
**Development Codename:** Project Chimera  

---

## 1. 概要

### 1.1. プログラム名
NISA口座最適活用・全自動資産運用プログラム

### 1.2. 目的
新NISA（少額投資非課税制度）の非課税メリットを最大化し、ユーザーに代わって資産の購入、配当金の再投資、リバランスまでを全自動で行う。これにより、専門知識や時間がないユーザーでも、明確なルールに基づく合理的かつ長期的な資産形成を可能にすることを目的とする。

### 1.3. 対象ユーザー
- NISA制度を利用して資産運用を始めたいが、何を買えば良いかわからない投資初心者。  
- 感情的な判断を排し、ルールに基づいた合理的な長期・積立・分散投資を実践したいユーザー。

### 1.4. コアコンセプト
本プログラムは、安定性を司る**「コア戦略」と、リターンの上乗せを狙う「サテライト戦略」**を組み合わせた「コア・サテライト運用」を自動で実行する。これにより、守りと攻めのバランスが取れたポートフォリオを構築・維持する。

---

## 2. 機能要件

### 2.1. 初期設定とパーソナライズ
- **証券口座連携:** Interactive Brokers証券のNISA口座とAPIで連携する。  
- **配当金受取方式の確認:** 「株式数比例配分方式」であるか確認し、異なる場合はアラートを出す。  
- **リスク許容度診断とポートフォリオ設定:**  
  - 「安定」「バランス」「積極」の3段階で診断。  
  - 結果に応じて `config.yaml` の比率を自動設定。

| タイプ | コア | サテライト① | サテライト② |
|:--|--:|--:|--:|
| 安定型 | 70% | 20% | 10% |
| バランス型 | 60% | 30% | 10% |
| 積極型 (デフォルト) | 50% | 30% | 20% |

---

### 2.2. 自動投資・運用機能

#### 2.2.1. 3つの戦略Botによる自動売買
**構成:**
- **コア戦略 (index_bot.py):** NISAつみたて枠で全世界株式を積立。  
- **サテライト① (dividend_bot.py):** 成長投資枠で日本高配当株を自動選定・購入。  
- **サテライト② (range_bot.py):** 課税口座でボリンジャーバンドを活用した短期売買。

#### 2.2.2. NISA非課税枠の最適管理
- 年間枠360万円、生涯枠1,800万円を常時監視。  
- 上限到達時は自動停止とDiscord通知。  
- 売却により復活した枠は翌年計画に反映。

#### 2.2.3. 収益の自動再投資とリバランス
- 受取配当金を自動再投資。  
- 比率乖離時は入金によるリバランスを優先。  
- NISA内では安易な売却を行わない。

#### 2.2.4. 資金配分とリバランス優先順位
1. コア戦略の確保  
2. 不足比率戦略への再配分（入金リバランス）

---

### 2.3. 可視化・レポート機能
**Interface:** Discord Webhook (`discord_logger.py`)  
- **リアルタイム通知:** 売買、リバランス、スクリーニング結果等。  
- **定期レポート:** 総資産、損益、非課税枠使用状況、税金軽減効果。

---

## 3. 技術アーキテクチャ

### 3.1. 実行環境と主要技術
- **環境:** Ubuntu 22.04 LTS  
- **言語:** Python 3.10+  
- **取引API:** Interactive Brokers  
- **構成:** `main_controller.py`, `bots/`, `shared_modules/`, `.env`, `config.yaml`

### 3.2. 制御フロー
- `APScheduler` により各Botを制御。  
- RangeBotは別スレッドでリアルタイム監視。  
- **Watchdog:**  
  - 10分ごとに生存確認。  
  - 停止検出時、最大3回再起動試行。  
  - 失敗時は全Bot停止＋DiscordへFATAL通知。

---

## 4. 非機能要件

### 4.1. セキュリティ
- 機密情報は `.env` に分離。  
- 公開設定値のみ `config.yaml` に保持。  

### 4.2. 法令遵守と自己責任
- 自己利用限定。  
- 投資助言行為を行わない明示。  
- 最終責任はユーザーに帰属。

### 4.3. エラーハンドリング
| 事象 | 対応 |
|:--|:--|
| API切断 | 指数関数的バックオフ。3回失敗で停止＋Discord通知。 |
| 部分約定 | 実約定数反映、DiscordにWARNING通知。 |
| メンテナンス中 | スタンバイモード移行→15分周期で復帰確認。 |

---

### 4.4. 手動介入機能 (Manual Override)
**コンポーネント:** `emergency_stop.py`  
- 実行により全注文キャンセル＋STOP.flag作成。  
- DiscordにCRITICAL通知。  
- `main_controller.py`はSTOP.flag検知時に全タスク停止。

---

### 4.5. 詳細ロギング
**形式:** JSONL  
**ファイル名:** `logs/chimera_YYYY-MM-DD.log`  
**記録要素:**  
timestamp, level, module, event, details  
**保持:** 7日間 or 50MB超でローテーション。

---

### 4.6. 運用監視・保守方針
- **ハートビート:** 24時間ごとにDiscordへINFO通知。  
- **例外リトライ:** 最大3回。  
- **ログ管理:** 古いファイル自動削除。

---

## 5. 開発・検証プロセス

### 5.1. バックテスト機能
- **データ:** `yfinance`で取得（Yahoo Finance）。  
- **粒度:** 日足。  
- **欠損:** forward fill。

### 5.2. パフォーマンス検証
1. **バックテスト:** 5年以上の過去データで検証。  
2. **ペーパー取引:** IB紙上口座で1ヶ月テスト。  
3. **本番運用:** 上記2段階通過後のみ許可。

---

## 6. 将来的な拡張仕様 (v4.0系で検討)

### 6.1. パフォーマンス計測
CPU・メモリ・API遅延を定期ログ化。

### 6.2. バックテスト結果の自動保存
バックテスト出力をJSONで `logs/backtest_results/` に自動保存。

### 6.3. ハートビート監視二重化
Discord通知に加え、`status/heartbeat.json` を更新。  
外部監視ツールでネットワーク断時も稼働確認可能。

---

## 付属ドキュメント

### 1. 設定ファイル群

#### 1.1. `.env.example`
```env
# ===============================================
# Environment Variables for Project Chimera
# DO NOT COMMIT THE ACTUAL .env FILE!
# ===============================================

# --- Interactive Brokers Account Credentials ---
IB_MAIN_ACCOUNT_ID="DU1234567"
IB_NISA_ACCOUNT_ID="FU7654321"

# --- Discord Notification Settings ---
DISCORD_WEBHOOK_URL="https://discord.com/api/webhooks/your_webhook_id/your_webhook_token"
1.2. config.yaml
# ===============================================================
# Public Configuration for Project Chimera
# ===============================================================

ib_gateway:
  host: "127.0.0.1"
  port: 5000
  client_id: 1

portfolio_ratios:
  index: 0.50
  dividend: 0.30
  range: 0.20

index_bot:
  ticker: "2559"
  monthly_investment: 30000

dividend_bot:
  max_holding_stocks: 5
  stop_loss_percentage: 0.20

range_bot:
  bollinger_period: 20
  bollinger_std_dev: 2.0
  stop_loss_percentage_on_break: 0.02

dividend_bot_criteria:
  min_dividend_yield: 4.0
  min_equity_ratio: 50.0
  max_per: 25.0
  no_dividend_cut_years: 10
2. システムシーケンス図 (v3)
sequenceDiagram
    participant User
    participant MainController
    participant Scheduler
    participant RangeBotThread
    participant DividendBot
    participant IBConnector
    participant DiscordLogger

    User->>MainController: python src/main_controller.py
    MainController->>IBConnector: 接続開始
    alt 接続成功
        MainController->>DiscordLogger: "システム起動完了"
    else 接続失敗
        MainController->>DiscordLogger: "【CRITICAL】Gateway接続失敗"
    end
    MainController->>Scheduler: 定期実行タスクを登録
    MainController->>RangeBotThread: リアルタイム監視スレッドを開始

    loop 取引時間中
        MainController-->>RangeBotThread: (Watchdog)生存確認
        RangeBotThread->>IBConnector: リアルタイム株価要求
        alt 取引シグナル発生
            RangeBotThread->>IBConnector: 発注リクエスト
            IBConnector-->>RangeBotThread: 約定応答
            RangeBotThread->>DiscordLogger: "【取引実行】..."
        end
        
        alt RangeBotThreadが例外で停止
            MainController->>DiscordLogger: "【ERROR】RangeBot停止"
            MainController->>RangeBotThread: 再起動処理 (試行1/3)
            alt 再起動3回失敗
                MainController->>DiscordLogger: "【FATAL】RangeBot回復不能"
            end
        end
    end
