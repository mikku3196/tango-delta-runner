import pandas as pd
import numpy as np
import yfinance as yf
from src.shared_modules.config_loader import ConfigLoader
from src.shared_modules.discord_logger import DiscordLogger
from src.shared_modules.ib_connector import IBConnector

class SatelliteRangeBot:
    def __init__(self, config, discord, ib_connector):
        self.config = config
        self.discord = discord
        self.ib_connector = ib_connector
        self.targets_file = "range_trade_target.csv"
        self.holdings_file = "range_holdings.csv"
        self.holdings = {}
    
    def run_screening(self):
        """繝ｬ繝ｳ繧ｸ逶ｸ蝣ｴ縺ｮ繧ｹ繧ｯ繝ｪ繝ｼ繝九Φ繧ｰ繧貞ｮ溯｡・""
        try:
            self.discord.info("繝ｬ繝ｳ繧ｸ逶ｸ蝣ｴ繧ｹ繧ｯ繝ｪ繝ｼ繝九Φ繧ｰ繧帝幕蟋・)
            
            # 譌･邨・25讒区・驫俶氛縺ｮ繧ｹ繧ｯ繝ｪ繝ｼ繝九Φ繧ｰ
            targets = self.screen_range_stocks()
            
            # 邨先棡繧辰SV縺ｫ菫晏ｭ・            targets.to_csv(self.targets_file, index=False)
            
            self.discord.success(f"繝ｬ繝ｳ繧ｸ逶ｸ蝣ｴ繧ｹ繧ｯ繝ｪ繝ｼ繝九Φ繧ｰ螳御ｺ・ {len(targets)}驫俶氛繧貞ｯｾ雎｡縺ｨ縺励※菫晏ｭ・)
            
        except Exception as e:
            self.discord.error(f"繝ｬ繝ｳ繧ｸ逶ｸ蝣ｴ繧ｹ繧ｯ繝ｪ繝ｼ繝九Φ繧ｰ繧ｨ繝ｩ繝ｼ: {str(e)}")
    
    def screen_range_stocks(self):
        """繝ｬ繝ｳ繧ｸ逶ｸ蝣ｴ縺ｮ繧ｹ繧ｯ繝ｪ繝ｼ繝九Φ繧ｰ譚｡莉ｶ繧帝←逕ｨ"""
        try:
            # 譌･邨・25讒区・驫俶氛繝ｪ繧ｹ繝茨ｼ井ｻｮ縺ｮ繝・・繧ｿ・・            nikkei225_symbols = self.get_nikkei225_symbols()
            
            targets = []
            
            for symbol in nikkei225_symbols[:20]:  # 繝・せ繝育畑縺ｫ20驫俶氛縺ｮ縺ｿ
                try:
                    # 驕主悉6繝ｶ譛医・萓｡譬ｼ繝・・繧ｿ繧貞叙蠕・                    price_data = self.get_price_data(symbol, period="6mo")
                    
                    if self.check_range_criteria(price_data):
                        targets.append({
                            'symbol': symbol,
                            'high_6m': price_data['High'].max(),
                            'low_6m': price_data['Low'].min(),
                            'range_ratio': self.calculate_range_ratio(price_data)
                        })
                        
                except Exception as e:
                    print(f"驫俶氛 {symbol} 縺ｮ繝・・繧ｿ蜿門ｾ励お繝ｩ繝ｼ: {e}")
                    continue
            
            return pd.DataFrame(targets)
            
        except Exception as e:
            self.discord.error(f"繧ｹ繧ｯ繝ｪ繝ｼ繝九Φ繧ｰ蜃ｦ逅・お繝ｩ繝ｼ: {str(e)}")
            return pd.DataFrame()
    
    def get_nikkei225_symbols(self):
        """譌･邨・25讒区・驫俶氛繧貞叙蠕・""
        # 螳溯｣・・蠕後〒隧ｳ邏ｰ蛹厄ｼ亥､夜ΚAPI縺ｾ縺溘・繧ｹ繧ｯ繝ｬ繧､繝斐Φ繧ｰ・・        return ["7203", "6758", "9984", "6861", "9432", "7201", "6752", "8035", "8306", "4503"]  # 莉ｮ縺ｮ繝・・繧ｿ
    
    def get_price_data(self, symbol, period="6mo"):
        """萓｡譬ｼ繝・・繧ｿ繧貞叙蠕・""
        try:
            ticker = yf.Ticker(f"{symbol}.T")
            hist = ticker.history(period=period)
            return hist
        except Exception as e:
            print(f"萓｡譬ｼ繝・・繧ｿ蜿門ｾ励お繝ｩ繝ｼ {symbol}: {e}")
            return pd.DataFrame()
    
    def check_range_criteria(self, price_data):
        """繝ｬ繝ｳ繧ｸ逶ｸ蝣ｴ縺ｮ譚｡莉ｶ繧偵メ繧ｧ繝・け"""
        try:
            if price_data.empty:
                return False
            
            # (驕主悉6繝ｶ譛医・譛鬮伜､ - 譛螳牙､) / 譛螳牙､ <= 0.25
            high_6m = price_data['High'].max()
            low_6m = price_data['Low'].min()
            range_ratio = (high_6m - low_6m) / low_6m
            
            return range_ratio <= 0.25
            
        except Exception as e:
            print(f"繝ｬ繝ｳ繧ｸ譚｡莉ｶ繝√ぉ繝・け繧ｨ繝ｩ繝ｼ: {e}")
            return False
    
    def calculate_range_ratio(self, price_data):
        """繝ｬ繝ｳ繧ｸ豈皮紫繧定ｨ育ｮ・""
        try:
            high_6m = price_data['High'].max()
            low_6m = price_data['Low'].min()
            return (high_6m - low_6m) / low_6m
        except Exception as e:
            print(f"繝ｬ繝ｳ繧ｸ豈皮紫險育ｮ励お繝ｩ繝ｼ: {e}")
            return 0
    
    def run_range_trading(self):
        """繝ｬ繝ｳ繧ｸ蜿門ｼ輔ｒ螳溯｡・""
        try:
            # 蜿門ｼ募ｯｾ雎｡驫俶氛縺ｮ逶｣隕・            try:
                targets = pd.read_csv(self.targets_file)
            except FileNotFoundError:
                self.discord.warning("蜿門ｼ募ｯｾ雎｡繝輔ぃ繧､繝ｫ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ")
                return
            
            if targets.empty:
                self.discord.warning("蜿門ｼ募ｯｾ雎｡縺後≠繧翫∪縺帙ｓ")
                return
            
            for _, target in targets.iterrows():
                self.monitor_stock(target)
                
        except Exception as e:
            self.discord.error(f"繝ｬ繝ｳ繧ｸ蜿門ｼ輔お繝ｩ繝ｼ: {str(e)}")
    
    def monitor_stock(self, target):
        """驫俶氛繧堤屮隕悶＠縺ｦ螢ｲ雋ｷ蛻､譁ｭ"""
        try:
            symbol = target['symbol']
            
            # 迴ｾ蝨ｨ縺ｮ譬ｪ萓｡繧貞叙蠕・            current_price = self.get_current_price(symbol)
            if current_price == 0:
                return
            
            # 繝懊Μ繝ｳ繧ｸ繝｣繝ｼ繝舌Φ繝峨ｒ險育ｮ・            bb_data = self.calculate_bollinger_bands(symbol)
            if bb_data is None:
                return
            
            upper_band = bb_data['upper']
            lower_band = bb_data['lower']
            middle_band = bb_data['middle']
            
            # 迴ｾ蝨ｨ縺ｮ菫晄怏迥ｶ豕√ｒ遒ｺ隱・            if symbol in self.holdings:
                # 螢ｲ蜊ｴ蛻､譁ｭ
                self.check_sell_conditions(symbol, current_price, bb_data)
            else:
                # 雉ｼ蜈･蛻､譁ｭ
                self.check_buy_conditions(symbol, current_price, bb_data)
                
        except Exception as e:
            print(f"驫俶氛逶｣隕悶お繝ｩ繝ｼ {target['symbol']}: {e}")
    
    def check_buy_conditions(self, symbol, current_price, bb_data):
        """雉ｼ蜈･譚｡莉ｶ繧偵メ繧ｧ繝・け"""
        try:
            lower_band = bb_data['lower']
            
            # 迴ｾ蝨ｨ縺ｮ譬ｪ萓｡ <= 繝懊Μ繝ｳ繧ｸ繝｣繝ｼ繝舌Φ繝我ｸ矩剞 (-2ﾏ・
            if current_price <= lower_band:
                self.execute_buy(symbol, current_price)
                
        except Exception as e:
            print(f"雉ｼ蜈･譚｡莉ｶ繝√ぉ繝・け繧ｨ繝ｩ繝ｼ {symbol}: {e}")
    
    def check_sell_conditions(self, symbol, current_price, bb_data):
        """螢ｲ蜊ｴ譚｡莉ｶ繧偵メ繧ｧ繝・け"""
        try:
            upper_band = bb_data['upper']
            lower_band = bb_data['lower']
            holding = self.holdings[symbol]
            purchase_price = holding['price']
            
            # 蛻ｩ遒ｺ: 迴ｾ蝨ｨ縺ｮ譬ｪ萓｡ >= 繝懊Μ繝ｳ繧ｸ繝｣繝ｼ繝舌Φ繝我ｸ企剞 (+2ﾏ・
            if current_price >= upper_band:
                self.execute_sell(symbol, current_price, "蛻ｩ遒ｺ")
                return
            
            # 謳榊・繧・ 迴ｾ蝨ｨ縺ｮ譬ｪ萓｡ <= 雉ｼ蜈･譎ゅ・繝懊Μ繝ｳ繧ｸ繝｣繝ｼ繝舌Φ繝我ｸ矩剞 * 0.98
            stop_loss_price = lower_band * 0.98
            if current_price <= stop_loss_price:
                self.execute_sell(symbol, current_price, "謳榊・繧・)
                return
            
            # 繝ｬ繝ｳ繧ｸ繝悶Ξ繧､繧ｯ謳榊・繧・            if current_price <= purchase_price * (1 - self.config.get("range_bot.stop_loss_percentage_on_break")):
                self.execute_sell(symbol, current_price, "繝ｬ繝ｳ繧ｸ繝悶Ξ繧､繧ｯ謳榊・繧・)
                
        except Exception as e:
            print(f"螢ｲ蜊ｴ譚｡莉ｶ繝√ぉ繝・け繧ｨ繝ｩ繝ｼ {symbol}: {e}")
    
    def execute_buy(self, symbol, price):
        """雉ｼ蜈･繧貞ｮ溯｡・""
        try:
            main_account = self.config.get("ib_account.main_account_id")
            
            # 雉ｼ蜈･謨ｰ驥上ｒ豎ｺ螳夲ｼ井ｻｮ縺ｮ蛟､・・            quantity = 100  # 100譬ｪ
            
            self.discord.info(f"繝ｬ繝ｳ繧ｸ蜿門ｼ戊ｳｼ蜈･繧帝幕蟋・ {symbol} {quantity}譬ｪ @{price}蜀・)
            
            # 螂醍ｴ・ｽ懈・
            contract = self.ib_connector.create_stock_contract(symbol)
            
            # 謌占｡瑚ｲｷ縺・ｳｨ譁・            order = self.ib_connector.create_market_order("BUY", quantity)
            
            # 豕ｨ譁・ｮ溯｡・            order_id = self.ib_connector.place_order(contract, order)
            
            # 蜿門ｼ暮夂衍
            self.discord.trade_notification("BUY", symbol, quantity, price, order_id)
            
            # 菫晄怏諠・ｱ繧定ｨ倬鹸
            self.holdings[symbol] = {
                'price': price,
                'quantity': quantity,
                'order_id': order_id,
                'purchase_time': pd.Timestamp.now()
            }
            
            self.discord.success(f"繝ｬ繝ｳ繧ｸ蜿門ｼ戊ｳｼ蜈･螳御ｺ・ {symbol} {quantity}譬ｪ @{price}蜀・(豕ｨ譁⑩D: {order_id})")
            
        except Exception as e:
            self.discord.error(f"繝ｬ繝ｳ繧ｸ蜿門ｼ戊ｳｼ蜈･繧ｨ繝ｩ繝ｼ: {str(e)}")
    
    def execute_sell(self, symbol, price, reason):
        """螢ｲ蜊ｴ繧貞ｮ溯｡・""
        try:
            if symbol not in self.holdings:
                return
            
            holding = self.holdings[symbol]
            quantity = holding['quantity']
            
            self.discord.info(f"繝ｬ繝ｳ繧ｸ蜿門ｼ募｣ｲ蜊ｴ繧帝幕蟋・ {symbol} {quantity}譬ｪ @{price}蜀・({reason})")
            
            # 螂醍ｴ・ｽ懈・
            contract = self.ib_connector.create_stock_contract(symbol)
            
            # 謌占｡悟｣ｲ繧頑ｳｨ譁・            order = self.ib_connector.create_market_order("SELL", quantity)
            
            # 豕ｨ譁・ｮ溯｡・            order_id = self.ib_connector.place_order(contract, order)
            
            # 蜿門ｼ暮夂衍
            self.discord.trade_notification("SELL", symbol, quantity, price, order_id)
            
            # 菫晄怏諠・ｱ繧貞炎髯､
            del self.holdings[symbol]
            
            # 謳咲寢險育ｮ・            profit_loss = (price - holding['price']) * quantity
            profit_loss_text = f"謳咲寢: {profit_loss:+,.0f}蜀・
            
            self.discord.success(f"繝ｬ繝ｳ繧ｸ蜿門ｼ募｣ｲ蜊ｴ螳御ｺ・ {symbol} {quantity}譬ｪ @{price}蜀・({reason}) - {profit_loss_text} (豕ｨ譁⑩D: {order_id})")
            
        except Exception as e:
            self.discord.error(f"繝ｬ繝ｳ繧ｸ蜿門ｼ募｣ｲ蜊ｴ繧ｨ繝ｩ繝ｼ: {str(e)}")
    
    def get_current_price(self, symbol):
        """迴ｾ蝨ｨ縺ｮ譬ｪ萓｡繧貞叙蠕・""
        try:
            ticker = yf.Ticker(f"{symbol}.T")
            hist = ticker.history(period="1d")
            return hist['Close'].iloc[-1]
        except Exception as e:
            print(f"譬ｪ萓｡蜿門ｾ励お繝ｩ繝ｼ {symbol}: {e}")
            return 0
    
    def calculate_bollinger_bands(self, symbol):
        """繝懊Μ繝ｳ繧ｸ繝｣繝ｼ繝舌Φ繝峨ｒ險育ｮ・""
        try:
            period = self.config.get("range_bot.bollinger_period")
            std_dev = self.config.get("range_bot.bollinger_std_dev")
            
            ticker = yf.Ticker(f"{symbol}.T")
            hist = ticker.history(period=f"{period+10}d")
            
            if len(hist) < period:
                return None
            
            # 遘ｻ蜍募ｹｳ蝮・            middle_band = hist['Close'].rolling(window=period).mean().iloc[-1]
            
            # 讓呎ｺ門￥蟾ｮ
            std = hist['Close'].rolling(window=period).std().iloc[-1]
            
            # 繝懊Μ繝ｳ繧ｸ繝｣繝ｼ繝舌Φ繝・            upper_band = middle_band + (std * std_dev)
            lower_band = middle_band - (std * std_dev)
            
            return {
                'upper': upper_band,
                'middle': middle_band,
                'lower': lower_band
            }
            
        except Exception as e:
            print(f"繝懊Μ繝ｳ繧ｸ繝｣繝ｼ繝舌Φ繝芽ｨ育ｮ励お繝ｩ繝ｼ {symbol}: {e}")
            return None
    
    def execute_additional_investment(self, amount):
        """霑ｽ蜉謚戊ｳ・ｒ螳溯｡鯉ｼ医Μ繝舌Λ繝ｳ繧ｹ譎ゑｼ・""
        try:
            self.discord.info(f"繝ｬ繝ｳ繧ｸ逶ｸ蝣ｴ霑ｽ蜉謚戊ｳ・ｒ髢句ｧ・ {amount}蜀・)
            
            # 蜿門ｼ募ｯｾ雎｡縺九ｉ譛驕ｩ縺ｪ驫俶氛繧帝∈螳・            try:
                targets = pd.read_csv(self.targets_file)
            except FileNotFoundError:
                self.discord.warning("蜿門ｼ募ｯｾ雎｡繝輔ぃ繧､繝ｫ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ")
                return
            
            if targets.empty:
                self.discord.warning("蜿門ｼ募ｯｾ雎｡縺後≠繧翫∪縺帙ｓ")
                return
            
            # 譛繧ゅΞ繝ｳ繧ｸ豈皮紫縺悟ｰ上＆縺・ｼ亥ｮ牙ｮ壹＠縺滂ｼ蛾釜譟・ｒ驕ｸ螳・            best_target = targets.loc[targets['range_ratio'].idxmin()]
            
            # 雉ｼ蜈･螳溯｡・            current_price = self.get_current_price(best_target['symbol'])
            if current_price > 0:
                self.execute_buy(best_target['symbol'], current_price)
            
        except Exception as e:
            self.discord.error(f"霑ｽ蜉謚戊ｳ・お繝ｩ繝ｼ: {str(e)}")
